---

- name: Init
  block:
  - name: get public IP
    ipify_facts:
    register: public_ip
    when: public_ipaddress is undefined

  - name: Set IPs with a public ip
    set_fact: 
      ipaddress: "{{ ansible_default_ipv4.address }}"
      public_ipaddress: "{{ ipify_public_ip }}"
    when: 
      - public_ipaddress is undefined
      - not public_ip.failed

  - name: Set IPs with non public ip
    set_fact: 
      ipaddress: "{{ ansible_default_ipv4.address }}"
      public_ipaddress: "{{ ipaddress }}"
    when: 
      - public_ipaddress is undefined
      - public_ip.failed

  - name: Set Public IPs from arguments
    set_fact: 
      public_ipaddress: "{{ ipaddress }}"
    when: 
      - public_ipaddress is undefined
      - ipaddress is defined

  - name: Set dns_recursor
    set_fact: 
      dns_recursor: "8.8.8.8"
    when: dns_recursor is undefined

  - debug:
      msg: "Public IP: {{ public_ipaddress }}"  
  - debug:
      msg: "Private IP: {{ ipaddress }}"  
  - debug:
      msg: "dns_recursor: {{ dns_recursor }}"  
 
  - debug:
      msg: "Install Mode: {{ install_mode }}"  
  - debug:
      msg: "protocol: {{ protocol }}"  
  - debug:
      msg: "certificate_creation: {{ certificate_creation }}"  

  - name: set base_urls to {{ domain_name }}
    set_fact: 
      base_url: "{{ protocol }}://{{ domain_name }}"  
      jenkins_base_url: "{{ protocol }}://{{ domain_name }}/jenkins"  
      gitbucket_base_url: "{{ protocol }}://{{ domain_name }}/gitbucket" 

  - name: set base_urls to lidop.local
    set_fact: 
      base_url: "{{ protocol }}://{{ ipaddress }}"
      jenkins_base_url: "{{ protocol }}://{{ ipaddress }}/jenkins"  
      gitbucket_base_url: "{{ protocol }}://{{ ipaddress }}/gitbucket"  
    when: domain_name == "lidop.local"

  - debug:
      msg: "base_url: {{ base_url }}"  
  - debug:
      msg: "jenkins_base_url: {{ jenkins_base_url }}"  
  - debug:
      msg: "gitbucket_base_url: {{ gitbucket_base_url }}"  

  - debug:
      msg: "consul_ip: {{ consul_ip }}"  
    when: node == "worker"

  - name: install python-consul
    shell: pip install python-consul
    when: 
      - install_mode == "online"
      - node == "worker"

  - name: Read swarm_manager_ip
    consul_kv:
        key: "config/swarm_manager_ip"
        host: "{{ consul_ip }}"
    register: swarm_manager_ip
    when: node == "worker"
  - set_fact: swarm_manager_ip="{{ swarm_manager_ip.data.Value }}"  
    when: node == "worker"
  - debug:
      msg: "swarm_manager_ip: {{ swarm_manager_ip }}"  
    when: node == "worker"
  - debug:
      msg: "Node MasterIpaddress: {{ swarm_manager_ip }}"  
    when: node == "worker"

  - name: Read swarm_manager_token
    consul_kv:
        key: "config/swarm_manager_token"
        host: "{{ consul_ip }}"
    register: swarm_manager_token
    when: node == "worker"
  - set_fact: swarm_manager_token="{{ swarm_manager_token.data.Value }}"  
    when: node == "worker"
  - debug:
      msg: "swarm_manager_token: {{ swarm_manager_token }}"  
    when: node == "worker"

  - name: Read swarm_worker_token
    consul_kv:
        key: "config/swarm_worker_token"
        host: "{{ consul_ip }}"
    register: swarm_worker_token
    when: node == "worker"
  - set_fact: swarm_worker_token="{{ swarm_worker_token.data.Value }}"  
    when: node == "worker"
  - debug:
      msg: "swarm_worker_token: {{ swarm_worker_token }}"  
    when: node == "worker"

  - name: Read secret_password
    consul_kv:
        key: "config/secret_password"
        host: "{{ consul_ip }}"
    register: secret_password
    when: node == "worker"
  - set_fact: secret_password="{{ secret_password.data.Value }}"  
    when: node == "worker"
  - set_fact: secret_password="{{ secret_password_generator }}"  
    when: node == "master"
  - debug:
      msg: "secret_password: {{ secret_password }}"  

  tags: init